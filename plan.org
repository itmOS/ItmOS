#+TODO: TODO PROGRESS DEFFERED | DONE

* Гайд по огранизации проекта
  В проекте две основные ветки -- master и plan. master -- с кодом, plan -- с этим файлом.
  Проект разбит на модули (модули тоже могут состоять из модулей). Основной контракт -- каждый модуль содержит Makefile, после
  выполнения команды make на котором модуль будет содержать статическую библиотеку имя_модуля.а, которую корневой Makefile слинкует с проектом.
  Чтобы добавить свой модуль -- скопируйте Makefile из любого другого модуля и поменяйте переменные OBJ и OUTPUT, а также добавите свой модуль в
  список модулей в корневом Makefile.
  По умолчанию мы используем виртуальную машину qemu, установите ее себе на компьютер и запустите команду 'make run' в корне проекта.
* Гайд по тому, что и как делать
  Если в чем-то сомневаетесь -- проконсультируйтесь у специалиста.
  Примечание: Вся строгость только к коммитам в мастер и ветки с фичами и багами, к ветке plan это не относится, тут не очень страшно что-то сломать.

  Если хотите реализовать какой-нибудь пункт, то добавьте измените статус пункта с TODO на PROGRESS, добавьте себя в поле :with:, как в примере с загрузчиком.
  После этого создайте issue на гитхаб с указанием пункта и ветку с именем 'feature #номер_issue' или 'bug #номер_issue', например 'feature #239'.
  Как обычно, разбивайте работу на коммиты и называйте их нормально, а не 'all done'.
  После того, как все доделали, напишите в вашем issue об этом и запуште вашу ветку (не лейте в мастер!). Коммиты должны автоматически прикрепиться по номеру.
  После того как 2-3 более-менее опытных участника напишут вам, что ваш код -- ок, Аккуратно смержте в мастер, проверив, что тесты работают и ничего не сломалось.
  При мерже используйте флаг --no-ff, чтобы оставалась древовидная история коммитов.
  Не стесняйтесь сами проверять чужой код, чтобы все были счастливы.
  Потом исправьте в этом файле PROGRESS на DONE, можете добавить некоторые комментарии по реализации, соблюдая структуру файла.

  Если вы реализуете какую-то библиотку для использования людьми, то не стесняйтесь добавить включаемый файл с импортом нужных функций
  и реализовать по-больще удобных макросов, потому что на макросах писать -- одно удовольствие!
  (Пример можете посмотреть в ostempalte, хотя приведенные там функции не очень удобны)

  Файлы мы называем с расширением .s (Makefile так лучше понимает, чем .asm), а включаемые файлы называем .inc.
  Глобальные функции префиксуйте названием модуля (e.g. tty_puts), чтобы избежать ошибок линковки.
* Примерный план создания ItmOS
  Многие пункты плохо расписаны по шагам, потому что до них еще нужно дойти.
** DONE Multiboot загрузчик
   :with: Zakhar Voit
** DEFFERED 64 битное ядро (Переключение в long mode)
   :with: Zakhar Voit
   Задолбался это делать, не могу заставить свой код заработать, думаю, что можно пока
   продолжить все делать в 32-битном режиме.
** DONE Инициализация таблицы сегментов и включение виртуальной памяти
   :with: Zakhar Voit
   Реализовал поддержку виртуальной памяти, замапил ядро в верхнюю часть (3GB+)
   оперативной памяти.
** PROGRESS Получение полезной информации от BIOS и первичного загрузчика
   Multiboot описывает как передается некоторая информация от BIOS и первичного загрузчика (например положение курсора на текстовом экране).
   Эта информация рано или поздно пригодится некоторым драйверам, было бы неплохо предоставить удобный интерфейс к ней.
   :with: Dmitry Tomp
   Постараюсь сделать доступ ко всему, о чём явно написано в Multiboot specification.
** TODO Драйвер текстового экрана
*** DONE Простой драйвер текстового экрана
    Пример есть в ostempalte, но приведенный там код обладает большим количеством недостатков (написан на коленке).
    :with: Dmitry Tomp
*** TODO Восстановление режима и положения курсора от первичного загрузчика.
*** TODO Поддержка hardware положения курсора (мигающее подчеркивание)
** PROGRESS Переключение в графический режим и использование основных возможностей VBE
   Полагаю, на демонстрации использование этой возможности пригодится, а на текущей стадии это даже реализуется.
   :with: Dmitry Tomp
** TODO Отладка, обработка ошибок логгирование и тестирование
   :PROPERTIES:
   :ORDERED:  t
   :END:
*** PROGRESS Логгирование
**** PROGRESS Удобный интерфейс для логов ядра, логгирование на экран.
     :with: Zakhar Voit
     Уже добавил простенькое логгироваиние, осталось printf'ы. (Это зависит от фикса printf'ов в модуле tty)
**** TODO Логгирование на жесткий диск.
*** TODO Удобный интерфейс для обработки ошибок в функциях ядра.
*** DONE Обший способ запуска тестов для различных модулей.
    :with: Zakhar Voit
    Добавил поддержку тестов (также их можно писать на С).
*** TODO Поддержка групп тестов
*** TODO Отладка
**** DONE Настроить помимо qemu эмулятор bochs, который предоставляет более удобную отладку.
     :with: Zakhar Voit
     Добавил поддержку bochs, как запускать написано в эмуляторе. При желании можно добавить в конфиг поддержду GUI debugger'a.
     Также добавил выбор эмулятора при запуске make (Описано в README.md).
**** TODO Какой-нибудь свой механизм отладки кода ядра
** DONE Прерывания
   :with: Marianna Bisyarina
** DEFFERED Драйвер для работы с клавиатурой
   :with: Marianna Bisyarina
   Реализована поддержка клавиатуры и конвертация скан-кодов в ASCII, так как пока
   что это не нужно, то удобный интерфейс еще не реализован
** TODO Драйвер для работы с жестким диском
*** PROGRESS Определение типа жёсткого (IDENTIFY)
		:with: Itegulov Daniyar
		Добавил простенький IDENTIFY, который умеет определять NOT_EXISTS, NON_ATA и SOME_ATA
*** TODO Драйвер AHCI для работы с SATA
*** TODO Драйвер SATAPI для работы с CD-ROM (это наверное далеко не самый обязательный пункт)
*** PROGRESS Драйвер ATA-PIO
**** TODO CHS
		 Вещь сомнительной свежести. Но возможно кто-то захочет разобраться
**** DONE 28-bit LBA
		 :with: Itegulov Daniyar
		 Реализован multisegment reading\writing
**** TODO 48-bit LBA
		 Возможно стоит запилить поддержку и этой штуки. Она является текущим стандартом
*** TODO Поддержка многозадачности
		Musthave как только появится сама многозадачность. Сейчас у нас блокирующий драйвер с poll-ом
** PROGRESS Менеджер физической памяти
   :with: Marianna Bisyarina
** TODO Файловая система (тут предпочтительно что-нибудь, что линукс монтирует: fat, ext2)
** PROGRESS Поддерка минимального набора системных вызовов
   Временные системные вызовы: чтение с консоли, вывод на консоль, выделение памяти
   :with: Marianna Bisyarina
** TODO Стандартная библиотека в том или ином виде
** TODO Поддержка запуска приложений
*** TODO Поддержка бинарного формата, например elf
** PROGRESS Многозадачность
*** PROGRESS Простой шедулер для начала
    :with Zakhar Voit
** TODO Командный интерпретатор
** TODO Некоторые user-land программы
** TODO Добавить ту или иную open-source лицензию в проект.
** TODO Добавить нескучные обои
** Добавляйте свои пункты
